-- @path MM=/mindmap2requirements/models/mindmap.ecore
-- @path MM1=/mindmap2requirements/models/requirements.ecore

module mindmap2requirements;
create OUT : MM1 from IN : MM;

-- A counter for Requirement ID
helper def: contIdR: Integer = 1;

-- A counter for RequirementGroup ID
helper def: contIdRG: Integer = 0;

helper context Integer def: inc(): Integer = self + 1;

--implementation of requirement 1
rule Map2Model {
from
m1: MM!"Map"
to
m2: requirements!Model (
title <- m1.title,
groups <- m1.rootTopics
)
}

-- Requirement 2
rule rootTopic2RequirementGroup {
	from
		s: MM!Topic ( s.subtopics->notEmpty() and
	      s.parent.oclIsUndefined() 
		)
	to
		t: requirements!RequirementGroup (
		name <- s.name,
		description <- s.description,
		requirements <- s.subtopics
		)
		do {
			thisModule.contIdRG <- thisModule.contIdRG.inc();
			t.id <- 'G0' + thisModule.contIdRG;
		}
}


-- Requirement 3
rule Topic2Requirement {
from
s: MM!Topic ( s.subtopics->isEmpty() and not
s.parent.oclIsUndefined() )
to
t: requirements!Requirement (
description <- s.description,
title <- s.description,
version <- version
),
version: requirements!Version (
major <- 1 , 
minor <- 1, 
service <- 1
)
do {
thisModule.contIdR <- thisModule.contIdR.inc();
t.id <- 'R0' + thisModule.contIdR;
t.parent.requirements <- t;
}
}

-- Requirement 4
rule Topic2RequirementGroup {
	from
		s: MM!Topic ( not s.parent.oclIsUndefined() 
			and s.subtopics->notEmpty()
		)
	to
		t: requirements!RequirementGroup (
		name <- s.name,
		description <- s.description,
		requirements <- s.subtopics
		)
		do {
			thisModule.contIdRG <- thisModule.contIdRG.inc();
			t.id <- t.parent.id + '-' + thisModule.contIdRG;
		}
}
